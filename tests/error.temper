let { CompiledRegex } = import("std/regex");
let { test, assert, TestFixtureBase } = import("std/testing");
let { compile } = import("../regex.temper");

export class ErrorTest {
  @test public ok(): Void {
    // Verify that the infrastructure works.
    // Usually, we'll be checking for errors in this file.
    assert(hasResult { compile("ok") }) { "expected result" }
  }

  @test public unclosedCapture(): Void {
    assertNoResult { compile("(unclosed") }
  }

  @test public unclosedCodePointGroup(): Void {
    assertNoResult { compile("[group-unclosed") }
  }

  @test public unclosedNamedCaptureName(): Void {
    assertNoResult { compile("(?name") }
    assertNoResult { compile("(?name=") }
    assertNoResult { compile("(?") }
  }
}

let assertNoResult(action: fn(): Void | NoResult): Void {
  assert(!hasResult(action)) { "expected no result" }
}

let hasResult(action: fn(): Void | NoResult): Boolean {
  do {
    action();
    true
  } orelse false
}
