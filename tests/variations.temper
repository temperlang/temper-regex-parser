let checkVariation(test: Test, re: CompiledRegex): Void | Bubble {
  let check(string: String, expected: String): Void {
    assert(re.find(string)["full"].value == expected);
  }
  check("all", expected = "a");
  check("beautify", expected = "b");
  check("can", expected = "c");
  check("demonstrate", expected = "d");
  check("regex", expected = "e");
  check("functions", expected = "f");
}

test("code set") { (test);;
  checkVariation(test, compile("[abcdef]"));
}

test("or") { (test);;
  checkVariation(test, compile("a|b|c|d|e|f"));
}

test("code range") { (test);;
  checkVariation(test, compile("[a-f]"));
}

test("sub") { (test);;
  let regex = compileWith(
    "(?$a-through-f)",
    [
      "a-through-f",
    ],
    [
      parseWith(
        "(?$char-a)|(?$char-b)|(?$char-c)|(?$char-d)|(?$char-e)|(?$char-f)",
        [
          "char-a",
          "char-b",
          "char-c",
          "char-d",
          "char-e",
          "char-f",
        ],
        [
          // Make one explicit simple string just for demo.
          new CodePoints("a"),
          parseWith(
            "(?$char-b)",
            [ "char-b" ],
            [ parse("b") ]
          ),
          parse("(?cee=c)"),
          parse("(d)"),
          parse("(e|e)"),
          parse("[f-f]"),
        ]
      ),
    ]
  );
  checkVariation(test, regex);
}
