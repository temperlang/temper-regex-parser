let checkVariation(test: Test, re: Regex): Void | Bubble {
  let check(string: String, expected: String): Void {
    assert(re.find(string)["full"].value == expected);
  }
  check("all", expected = "a");
  check("beautify", expected = "b");
  check("can", expected = "c");
  check("demonstrate", expected = "d");
  check("regex", expected = "e");
  check("functions", expected = "f");
}

test("code set") { (test);;
  checkVariation(test, compile("[abcdef]"));
}

test("or") { (test);;
  checkVariation(test, compile("a|b|c|d|e|f"));
}

test("code range") { (test);;
  checkVariation(test, compile("[a-f]"));
}

test("sub") { (test);;
  let a: RegexNode = new CodePoints("a");
  let regex = compileWith(
    "(?$a-through-f)",
    new Map([
      new Pair("a-through-f", parseWith(
        "(?$char-a)|(?$char-b)|(?$char-c)|(?$char-d)|(?$char-e)|(?$char-f)",
        new Map([
          // Make one explicit simple string just for demo.
          new Pair("char-a", a),
          new Pair("char-b", parseWith(
            "(?$char-b)",
            new Map([ new Pair("char-b", parse("b")) ]),
          )),
          new Pair("char-c", parse("(?cee=c)")),
          new Pair("char-d", parse("(d)")),
          new Pair("char-e", parse("(e|e)")),
          new Pair("char-f", parse("[f-f]")),
        ]),
      )),
    ]),
  );
  checkVariation(test, regex);
}
