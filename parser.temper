class Parser {
  public chars: List<String>;
  public var pos: Int;
  public slots: Mapped<String, Regex>;
  public errors: ListBuilder<String>;

  /** The [slots] aren't copied, so do any parsing synchronously. */
  public constructor(str: String, slots: Mapped<String, Regex> = new Map([])) {
    chars = str.split("");
    pos = 0;
    this.slots = slots;
    errors = new ListBuilder<String>();
  }

  public error(e: String): Void {
    errors.add("${e}");
  }

  public isDone(): Boolean {
    chars.length <= pos
  }

  public peek(): String {
    if (isDone()) {
      error("done");
      return "";
    }
    chars[pos]
  }

  public advance(): Void {
    pos += 1;
  }

  public read(): String {
    let ret = peek();
    advance();
    ret
  }

  public matchChar(s: String): Boolean {
    if (peek() == s) {
      advance();
      true
    } else {
      false
    }
  }

  public charClassBody(): Regex | Bubble {
    let invert = matchChar("^");
    let opts = new ListBuilder<CodePart>();
    while (!matchChar("]")) {
      if (isDone()) {
        bubble()
      }
      let firstChar = read();
      if (matchChar("-")) {
        let secondChar = read();
        opts.add(new CodeRange(firstChar.codePoints.read(), secondChar.codePoints.read()));
      } else {
        opts.add(new CodePoints(firstChar));
      }
    }
    new CodeSet(opts.toList(), invert)
  }

  public readPostfix(exist: Regex): Regex {
    if (matchChar("+")) {
      new Repeat(exist, 1, null, matchChar("?"))
    } else if (matchChar("*")) {
      new Repeat(exist, 0, null, matchChar("?"))
    } else if (matchChar("?")) {
      new Repeat(exist, 0, 1, matchChar("?"))
    } else {
      exist
    }
  }

  public readSingle(): Regex | Bubble {
    if (matchChar("[")) {
      charClassBody()
    } else if (matchChar("(")) {
      if (matchChar("?")) {
        // non capturing group
        if (matchChar(":")) {
          let regex = readOr();
          if (!matchChar(")")) {
            error("closing paren");
            bubble();
          }
          regex
        } else if (matchChar("$")) {
          let parts = new ListBuilder<String>();
          while (!matchChar(")")) {
            if (isDone()) {
              error("missing closing paren in (?$...)");
              bubble();
            }
            parts.add(read());
          }
          let str = parts.join("", fn(s: String): String{s});
          slots[str] orelse do {
            error("no such slot: ${str}");
            bubble()
          }
        } else if (matchChar("=")) {
          error("positive lookhead is not supported");
          bubble()
        } else if (matchChar("<")) {
          if (matchChar("=")) {
            error("positive lookbehind is not supported");
            bubble()
          } else if (matchChar("!")) {
            error("negative lookbehind is not supported");
            bubble()
          } else {
            error("unknown sequence (<${peek()}");
            bubble()
          }
        } else if (matchChar("!")) {
          error("negative lookahead is not supported");
          bubble()
        } else {
          let str = new ListBuilder<String>();
          while (matchChar(" ")) {}
          while (!matchChar("=")) {
            if (isDone()) {
              error("missing = in (?${str.join("", fn(s: String): String{s})}=...)");
              return bubble()
            }
            str.add(read());
            while (matchChar(" ")) {}
          }
          let regex = readOr();
          if (!matchChar(")")) {
            error("closing paren");
            bubble();
          }
          let name = str.join("", fn(s: String): String{s});
          new Capture(name, regex)
        }
      } else {
        let regex = readOr();
        if (!matchChar(")")) {
          error("closing paren");
          bubble();
        }
        regex
      }
    } else if (matchChar("^")) {
      Begin
    } else if (matchChar("$")) {
      End
    } else if (matchChar(".")) {
      Dot
    } else if (matchChar("\\")) {
      var escapeCode = peek();
      if (matchChar("b")) {
        WordBoundary
      } else if (matchChar("d")) {
        Digit
      } else if (matchChar("w")) {
        Word
      } else if (matchChar("s")) {
        Space
      } else if (
        matchChar("(") || matchChar(")")
        || matchChar("[") || matchChar("]")
        || matchChar("{") || matchChar("}")
        || matchChar(".") || matchChar("\\")
      ) {
        new CodePoints(escapeCode)
      } else {
        error("unknown escape code: \\${peek()}");
        bubble()
      }
    } else if (matchChar("+") || matchChar("*") || matchChar("?")) {
      error("invalid repeat");
      bubble()
    } else {
      new CodePoints(read())
    }
  }

  public readSeq(): Regex | Bubble {
    let seq = new ListBuilder<Regex>();
    // Maintain a buffer for sequential code points.
    let codeBuffer = new ListBuilder<String>();
    let popCodeBuffer(): Void {
      if (!codeBuffer.isEmpty) {
        seq.add(new CodePoints(codeBuffer.join("") { (it);; it }));
        // TODO Add `clear` method to ListBuilder for efficiency.
        codeBuffer.splice(0);
      }
    }
    // Loop through everything at this level.
    while (!isDone() && peek() != "|" && peek() != ")") {
      let regex = readPostfix(readSingle());
      match (regex) {
        is CodePoints -> codeBuffer.add(regex.value);
        else -> do {
          popCodeBuffer();
          seq.add(regex);
        }
      }
    }
    popCodeBuffer();
    // Finish result.
    match (seq.length) {
      1 -> seq[0];
      else -> new Sequence(seq.toList());
    }
  }

  public readOr(): Regex | Bubble {
    let ors = new ListBuilder<Regex>();
    while (!isDone() && peek() != ")") {
      if (ors.length != 0 && !matchChar("|")) {
        console.log(pos.toString());
        error("or");
        bubble();
      }
      let regex = readSeq();
      ors.add(regex);
    }
    match (ors.length) {
      1 -> ors[0];
      else -> new Or(ors.toList());
    }
  }
}
