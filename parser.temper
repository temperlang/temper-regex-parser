let Char = Int;

class Parser(
  public chars: String,
  public slots: Mapped<String, RegexNode> = new Map([]),
) {
  public var pos: StringIndex = String.begin;
  public errors: ListBuilder<String> = new ListBuilder<String>();

  public error(e: String): Void {
    // TODO Track position also?
    errors.add(e) orelse void;
  }

  public isDone(): Boolean {
    chars.end <= pos
  }

  public peek(): Char {
    if (isDone()) {
      error("done");
      return 0;
    }
    chars[pos] orelse panic()
  }

  public advance(): Void {
    pos = chars.next(pos);
  }

  public read(): Char {
    let ret = peek();
    advance();
    ret
  }

  public matchChar(s: Char): Boolean {
    if (peek() == s) {
      advance();
      true
    } else {
      false
    }
  }

  private matchRepeat(): Boolean {
    matchChar(char"+") || matchChar(char"*") || matchChar(char"?")
  }

  public charClassBody(): RegexNode | Bubble {
    let invert = matchChar(char"^");
    let opts = new ListBuilder<CodePart>();
    while (!matchChar(char"]")) {
      if (isDone()) {
        bubble()
      }
      let first = charClassUnit();
      if (matchChar(char"-")) {
        if (matchChar(char"]")) {
          // Exit on square bracket either way. Would need escaped.
          opts.add(new CodePoints("-"));
          break;
        }
        let second = charClassUnit();
        opts.add(new CodeRange(extractCode(first), extractCode(second)));
      } else {
        opts.add(first);
      }
    }
    new CodeSet(opts.toList(), invert)
  }

  private charClassUnit(): CodePart | Bubble {
    if (matchChar(char "\\")) {
      finishEscape() as CodePart orelse do {
        error("invalid code part");
        bubble()
      }
    } else {
      new CodePoints(String.fromCodePoint(read()))
    }
  }

  private extractCode(codePart: CodePart): Int | Bubble {
    (codePart as CodePoints).value[String.begin] orelse do {
      error("invalid range edge");
      bubble()
    }
  }

  private finishEscape(): RegexNode | Bubble {
    var escapeCode = peek();
    if (matchChar(char"b")) {
      WordBoundary
    } else if (matchChar(char"d")) {
      Digit
    } else if (matchChar(char"n")) {
      new CodePoints("\n")
    } else if (matchChar(char"r")) {
      new CodePoints("\r")
    } else if (matchChar(char"s")) {
      Space
    } else if (matchChar(char"t")) {
      new CodePoints("\t")
    // TODO Need more support in temper core for hex decoding.
    // } else if (matchChar(char"u")) {
    //   if (matchChar(char"{")) {
    //     //
    //   }
    } else if (matchChar(char"w")) {
      Word
    } else if (
      matchChar(char"(") || matchChar(char")")
      || matchChar(char"[") || matchChar(char"]")
      || matchChar(char"{") || matchChar(char"}")
      || matchChar(char".") || matchChar(char "\\") || matchChar(char"-")
      || matchRepeat()
    ) {
      new CodePoints(String.fromCodePoint(escapeCode))
    } else {
      error("unknown escape code: \\${String.fromCodePoint(peek())}");
      bubble()
    }
  }

  public readPostfix(exist: RegexNode): RegexNode {
    if (matchChar(char"+")) {
      new Repeat(exist, 1, null, matchChar(char"?"))
    } else if (matchChar(char"*")) {
      new Repeat(exist, 0, null, matchChar(char"?"))
    } else if (matchChar(char"?")) {
      new Repeat(exist, 0, 1, matchChar(char"?"))
    } else {
      exist
    }
  }

  public readSingle(): RegexNode | Bubble {
    if (matchChar(char"[")) {
      charClassBody()
    } else if (matchChar(char"(")) {
      if (matchChar(char"?")) {
        // non capturing group
        if (matchChar(char":")) {
          let regex = readOr();
          if (!matchChar(char")")) {
            error("closing paren");
            bubble();
          }
          regex
        } else if (matchChar(char"$")) {
          let parts = new StringBuilder();
          while (!matchChar(char")")) {
            if (isDone()) {
              error("missing closing paren in (?$...)");
              bubble();
            }
            parts.appendCodePoint(read());
          }
          let str = parts.toString();
          slots[str] orelse do {
            error("no such slot: ${str}");
            bubble()
          }
        } else if (matchChar(char"=")) {
          error("positive lookhead is not supported");
          bubble()
        } else if (matchChar(char"<")) {
          if (matchChar(char"=")) {
            error("positive lookbehind is not supported");
            bubble()
          } else if (matchChar(char"!")) {
            error("negative lookbehind is not supported");
            bubble()
          } else {
            error("unknown sequence (<${String.fromCodePoint(peek())}");
            bubble()
          }
        } else if (matchChar(char"!")) {
          error("negative lookahead is not supported");
          bubble()
        } else {
          let str = new StringBuilder();
          while (matchChar(char" ")) {}
          while (!matchChar(char"=")) {
            if (isDone()) {
              error("missing = in (?${str.toString()}=...)");
              return bubble()
            }
            str.appendCodePoint(read());
            while (matchChar(char" ")) {}
          }
          let regex = readOr();
          if (!matchChar(char")")) {
            error("closing paren");
            bubble();
          }
          let name = str.toString();
          new Capture(name, regex)
        }
      } else {
        let regex = readOr();
        if (!matchChar(char")")) {
          error("closing paren");
          bubble();
        }
        regex
      }
    } else if (matchChar(char"^")) {
      Begin
    } else if (matchChar(char"$")) {
      End
    } else if (matchChar(char".")) {
      Dot
    } else if (matchChar(char "\\")) {
      finishEscape()
    } else if (matchRepeat()) {
      error("invalid repeat");
      bubble()
    } else {
      new CodePoints(String.fromCodePoint(read()))
    }
  }

  public readSeq(): RegexNode | Bubble {
    let seq = new ListBuilder<RegexNode>();
    // Maintain a buffer for sequential code points.
    let codeBuffer = new ListBuilder<String>();
    let popCodeBuffer(): Void | Bubble {
      if (!codeBuffer.isEmpty) {
        // TODO If we add `clear` to StringBuilder, we can use that here.
        seq.add(new CodePoints(codeBuffer.join("") { (it);; it }));
        codeBuffer.clear();
      }
    }
    // Loop through everything at this level.
    while (!isDone() && peek() != char"|" && peek() != char")") {
      let regex = readPostfix(readSingle());
      when (regex) {
        is CodePoints -> codeBuffer.add(regex.value);
        else -> do {
          popCodeBuffer();
          seq.add(regex);
        }
      }
    }
    popCodeBuffer();
    // Finish result.
    when (seq.length) {
      1 -> seq[0];
      else -> new Sequence(seq.toList());
    }
  }

  public readOr(): RegexNode | Bubble {
    let ors = new ListBuilder<RegexNode>();
    while (!isDone() && peek() != char")") {
      if (ors.length != 0 && !matchChar(char"|")) {
        console.log(chars.countBetween(String.begin, pos).toString());
        error("or");
        bubble();
      }
      let regex = readSeq();
      ors.add(regex);
    }
    when (ors.length) {
      1 -> ors[0];
      else -> new Or(ors.toList());
    }
  }
}
